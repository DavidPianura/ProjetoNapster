package napster;

import java.io.File;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.util.LinkedList;
import java.util.Scanner;

import com.google.gson.Gson;

public class NapsterPeer {
	
	public class ThreadPeer extends Thread{
		
		public void run() {
			try {
				
			} catch (Exception e) {
				
			}
		}
	}
	
	public static LinkedList<String> getInfosFolder(String folder) {
		
		File diretorio = new File(folder);
		LinkedList<String> arquivos = new LinkedList<String>();
		
		for (File file:diretorio.listFiles()) {
			arquivos.add(file.getName());
		}
		return arquivos;
		
	}
	
	public static void join_request(String req, NapsterMessage msg, DatagramSocket clientSocket) throws Exception{
		
		InetAddress IPAddres = InetAddress.getByName("127.0.0.1");
		byte[] sendData = new byte[1024];
		sendData = req.getBytes();
		DatagramPacket sendPacket = new DatagramPacket(sendData, sendData.length, IPAddres, 10098);
		clientSocket.send(sendPacket);
		
		byte[] recBuffer = new byte[1024];	
		DatagramPacket recPkt = new DatagramPacket(recBuffer, recBuffer.length);
		clientSocket.receive(recPkt);
		
		String informacao = new String(recPkt.getData(), recPkt.getOffset(), recPkt.getLength());
		
		// Printando infos quando JOIN_OK é recebido
		InetAddress peer_ip = sendPacket.getAddress();
		int peer_port = sendPacket.getLocalPort();
		System.out.println("Sou o peer " + peer_ip.getHostAddress() + ":" + peer_port + " com arquivos " + msg.getProperties());
		
		
	}
	
	public static void main(String[] args) throws Exception{
		
		Gson gson = new Gson();
		DatagramSocket clientSocket = new DatagramSocket();
		
		boolean leave = false;
		Scanner tec = new Scanner (System.in);
		
		System.out.println("----------------------------------------------");
		System.out.println("              Projeto Napster                 ");
		System.out.println("----------------------------------------------\n");
		
		
		while (!leave) {
			
			int option = 0;
			
			// MENU INTERATIVO
			System.out.println();
			System.out.println("Para escolher uma funcao, digite o numero e tecle enter:");
			System.out.println("1. JOIN");
			System.out.println("2. SEARCH");
			System.out.println("3. DOWNLOAD");
			System.out.println("4. LEAVE");
			
			while (option <= 0 || option > 3) {
				System.out.print("Opcao escolhida: ");
				option = tec.nextInt();
				
				if (option <= 0 || option > 4) {
					System.out.println("Opcao invalida");
				}
			}
			
			switch(option) {
				case 1:
					String folder;
					System.out.print("Escreva o caminho completo da pasta: ");
					tec.nextLine();
					folder = tec.nextLine();
					LinkedList<String> files = new LinkedList<>();
					files = getInfosFolder(folder);
					NapsterMessage msg = new NapsterMessage("JOIN", files);
					System.out.println(gson.toJson(msg));
					join_request(gson.toJson(msg), msg, clientSocket);		
					
					break;
			}
		}
		clientSocket.close();
		tec.close();
	}
}
